{"version":3,"file":"component---src-templates-home-jsx-70facebce0432c35c491.js","mappings":"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","sources":["webpack://headless-gatsby-multilang/./src/components/Layout/Blog/Cards/ArticleCard.jsx","webpack://headless-gatsby-multilang/./src/components/Layout/RichText/styles.js","webpack://headless-gatsby-multilang/./src/components/Layout/RichText/index.jsx","webpack://headless-gatsby-multilang/./src/components/Layout/sharedStyles/uncontrolledHTMLStyles.js","webpack://headless-gatsby-multilang/./src/functions/formatDateTime.js","webpack://headless-gatsby-multilang/./src/hooks/useFormattedDate.js","webpack://headless-gatsby-multilang/./src/templates/Home.jsx"],"sourcesContent":["import { useFormattedDate } from '../../../../hooks/useFormattedDate';\r\n\r\nimport {\r\n  CardLink,\r\n  CategoryBox,\r\n  ContentWrapper,\r\n  PostTitle,\r\n  Date,\r\n  Excerpt,\r\n  AuthorCtaContainer,\r\n  AuthorContainer,\r\n  AuthorImg,\r\n  artDirectedCardImgs,\r\n  CardImgContainer,\r\n  CardImg,\r\n} from './styles';\r\n\r\nexport const ArticleCard = ({\r\n  recordId,\r\n  date,\r\n  title,\r\n  excerpt,\r\n  authorImg,\r\n  authorName,\r\n  category,\r\n  cardImg,\r\n  cardImgMobile,\r\n  altImg,\r\n}) => {\r\n  const images = artDirectedCardImgs(cardImg, cardImgMobile);\r\n\r\n  const { formattedDate } = useFormattedDate(date);\r\n\r\n  return (\r\n    <article>\r\n      <CardLink recordId={recordId}>\r\n        <CardImgContainer>\r\n          <CardImg objectFit=\"cover\" image={images} alt={altImg || ''} />\r\n        </CardImgContainer>\r\n        <ContentWrapper>\r\n          {category && <CategoryBox>{category.title}</CategoryBox>}\r\n          <Date>{formattedDate}</Date>\r\n          <PostTitle>{title}</PostTitle>\r\n          <Excerpt>{excerpt}</Excerpt>\r\n          <AuthorCtaContainer>\r\n            <AuthorContainer>\r\n              <AuthorImg\r\n                objectFit=\"cover\"\r\n                image={authorImg || ''}\r\n                alt={authorName || ''}\r\n              />\r\n              <Date as=\"address\">{authorName}</Date>\r\n            </AuthorContainer>\r\n          </AuthorCtaContainer>\r\n        </ContentWrapper>\r\n      </CardLink>\r\n    </article>\r\n  );\r\n};\r\n","import styled, { css } from 'styled-components';\r\nimport { uncontrolledHTMLStyles } from '../sharedStyles/uncontrolledHTMLStyles';\r\n\r\nexport const RichTextStyles = styled.div`\r\n  ${uncontrolledHTMLStyles};\r\n\r\n  ${({ isRtl }) =>\r\n    isRtl\r\n      ? css`\r\n          ol,\r\n          ul {\r\n            padding-right: 1.33em;\r\n          }\r\n        `\r\n      : css`\r\n          ol,\r\n          ul {\r\n            padding-left: 1.33em;\r\n          }\r\n        `};\r\n\r\n  --paragraphMargin: 0 0 1em 0;\r\n  --listMargin: 0 0 0.33em 0;\r\n\r\n  color: var(--baseTextColor);\r\n  font-size: var(--baseM);\r\n  line-height: 1.4;\r\n  text-align: inherit;\r\n\r\n  & a {\r\n    color: var(--primaryColor);\r\n    text-decoration: underline;\r\n  }\r\n\r\n  & > p {\r\n    margin: var(--paragraphMargin);\r\n\r\n    &:only-child,\r\n    &:last-child {\r\n      margin: 0;\r\n    }\r\n  }\r\n\r\n  & code {\r\n    background: var(--inlineCodeBackgroundColor);\r\n    padding: 0.1em 0.2em;\r\n    border-radius: 5px;\r\n    color: var(--inlineCodeTextColor);\r\n    font-family: var(--defaultCodeStack);\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: var(--baseMMobile);\r\n  }\r\n`;\r\n","import { useTextDirection } from '../../../hooks/useTextDirection';\r\nimport { RichTextStyles } from './styles';\r\n\r\nexport const RichText = ({ children }) => {\r\n  const { isRtl } = useTextDirection();\r\n  return <RichTextStyles isRtl={isRtl}>{children}</RichTextStyles>;\r\n};\r\n","import { css } from 'styled-components';\r\n\r\n/**\r\n * Base styles added to any component rendering uncontrolled vanilla\r\n * HTML such as Markdown or Structured Text\r\n */\r\n\r\nexport const uncontrolledHTMLStyles = css`\r\n  & ol {\r\n    list-style-type: decimal;\r\n    margin: var(--paragraphMargin);\r\n    line-height: 1.6;\r\n\r\n    & li {\r\n      & > ol {\r\n        list-style-type: lower-roman;\r\n        margin: var(--listMargin);\r\n      }\r\n      & p {\r\n        margin: 0;\r\n      }\r\n      &::marker {\r\n        color: var(--baseTextColor);\r\n        font-size: var(--baseL);\r\n      }\r\n    }\r\n  }\r\n\r\n  & ul {\r\n    list-style-type: disc;\r\n    margin: var(--paragraphMargin);\r\n    line-height: 1.6;\r\n\r\n    & li {\r\n      & > ul {\r\n        margin: var(--listMargin);\r\n      }\r\n      & p {\r\n        margin: 0;\r\n      }\r\n      &::marker {\r\n        color: var(--baseTextColor);\r\n        font-size: var(--baseM);\r\n      }\r\n    }\r\n  }\r\n\r\n  & a {\r\n    color: var(--primaryColor);\r\n    text-decoration: underline;\r\n\r\n    & > code {\r\n      background: var(--inlineCodeBackgroundColor);\r\n      padding: 0.1em 0.2em;\r\n      border-radius: 5px;\r\n    }\r\n  }\r\n\r\n  & p > code {\r\n    background: var(--inlineCodeBackgroundColor);\r\n    color: var(--inlineCodeTextColor);\r\n    padding: 0.1em 0.2em;\r\n    border-radius: 5px;\r\n  }\r\n\r\n  & mark {\r\n    background: var(--markBackgroundColor);\r\n    color: var(--markTextColor);\r\n  }\r\n\r\n  /* Code block styles */\r\n\r\n  & pre {\r\n    padding: var(--globalPaddingLr) !important;\r\n    border-radius: var(--defaultRadius) !important;\r\n    margin: var(--paragraphMargin) !important;\r\n    background: var(--codeBlockBackgroundColor) none repeat scroll 0% 0% !important;\r\n    border: var(--borderSmall) solid var(--dividerColor) !important;\r\n\r\n    @media (max-width: 800px) {\r\n      border-radius: 0 !important;\r\n      margin: var(--paragraphBottomMargin) calc(var(--globalPaddingLr) * -1) !important;\r\n    }\r\n\r\n    & code {\r\n      font-family: var(--defaultCodeStack) !important;\r\n    }\r\n  }\r\n`;\r\n","const timeOptions = {\r\n  hour: '2-digit',\r\n  minute: '2-digit',\r\n};\r\n\r\nconst dateOptions = {\r\n  year: 'numeric',\r\n  month: 'short',\r\n  day: 'numeric',\r\n};\r\n\r\nconst formatDateTime = (dateString, contextLocale) =>\r\n  new Date(dateString).toLocaleString(contextLocale, {\r\n    ...dateOptions,\r\n    ...timeOptions,\r\n  });\r\n\r\nconst formatDate = (dateString, contextLocale) =>\r\n  new Date(dateString).toLocaleString(contextLocale, {\r\n    ...dateOptions,\r\n  });\r\n\r\nexport { formatDateTime, formatDate };\r\n","import { useContext } from 'react';\r\n\r\nimport { LocaleContext } from '../components/ContextProviders/LocaleProvider';\r\nimport { formatDate } from '../functions/formatDateTime';\r\n\r\nexport const useFormattedDate = (dateString) => {\r\n  const { pageLocale } = useContext(LocaleContext);\r\n\r\n  const formattedDate = formatDate(dateString, pageLocale);\r\n\r\n  return { formattedDate };\r\n};\r\n","import { graphql } from 'gatsby';\r\n\r\nimport { PageWrapper } from '../components/Layout/PageWrapper';\r\nimport { Hero } from '../components/Layout/Hero';\r\nimport { Navigator } from '../components/Navigator';\r\nimport { RichText } from '../components/Layout/RichText';\r\nimport { ArticleCard } from '../components/Layout/Blog/Cards/ArticleCard';\r\nimport {\r\n  SectionGridThreeCols,\r\n  GridTextBox,\r\n} from '../components/Layout/sharedStyles/sectionStyles';\r\nimport {\r\n  HeadingSmallWithTip,\r\n  SectionTitle,\r\n} from '../components/Layout/sharedStyles/headingStyles';\r\nimport { builder, BuilderComponent } from '@builder.io/react'\r\n\r\nbuilder.init('746be61c2558434bb2a8fa489a36b0b1')\r\n\r\nconst HomepageTemplate = ({\r\n  data: {\r\n    datoCmsHomepage: {\r\n      seo,\r\n      hero: [{ heroAlt, heroTitle, heroSubtitle }],\r\n      features,\r\n      featuredPostsTitle,\r\n    },\r\n    datoCmsBlogRoot: { id },\r\n    allBlogPosts: { postNodes },\r\n    datoCmsMiscTextString: { seeAllPosts },\r\n  },\r\n  pageContext,\r\n\r\n}) => (\r\n  <PageWrapper\r\n    pageData={pageContext}\r\n    seoTitle={seo?.seoTitle}\r\n    seoDescription={seo?.seoDescription}\r\n    seoImage={seo?.seoImage?.seoImageUrl}\r\n  >\r\n    <BuilderComponent\r\n      model=\"page\" />\r\n    <Hero\r\n      caption={heroAlt}\r\n      title={heroTitle}\r\n      subtitle={heroSubtitle}\r\n      button={\r\n        <Navigator className=\"classicButton classicButtonOutline\" recordId={id}>\r\n          {seeAllPosts}\r\n        </Navigator>\r\n      }\r\n      sectionChildren={\r\n        <SectionGridThreeCols noPaddings>\r\n          {features.map(({ id: featureId, title, description }) => (\r\n            <GridTextBox small key={featureId}>\r\n              <HeadingSmallWithTip>{title}</HeadingSmallWithTip>\r\n              <RichText>{description}</RichText>\r\n            </GridTextBox>\r\n          ))}\r\n        </SectionGridThreeCols>\r\n      }\r\n    />\r\n\r\n    {postNodes.length > 0 && (\r\n      <section style={{ paddingTop: 'var(--globalPaddingTb)' }}>\r\n        <SectionTitle>{featuredPostsTitle}</SectionTitle>\r\n        <SectionGridThreeCols>\r\n          {postNodes.map(\r\n            ({\r\n              id: recordId,\r\n              meta: { updatedAt },\r\n              title,\r\n              coverImage,\r\n              subtitle,\r\n              author: {\r\n                authorName,\r\n                picture: { authorImageData },\r\n              },\r\n              categoryLink,\r\n            }) => (\r\n              <ArticleCard\r\n                key={recordId}\r\n                recordId={recordId}\r\n                date={updatedAt}\r\n                category={categoryLink}\r\n                cardImg={coverImage.gatsbyImageData}\r\n                cardImgMobile={coverImage.squaredImage}\r\n                altImg={title}\r\n                title={title}\r\n                excerpt={subtitle}\r\n                authorImg={authorImageData}\r\n                authorAltImg={authorName}\r\n                authorName={authorName}\r\n              />\r\n            )\r\n          )}\r\n        </SectionGridThreeCols>\r\n      </section>\r\n    )}\r\n  </PageWrapper>\r\n);\r\n\r\nexport default HomepageTemplate;\r\n\r\nexport const query = graphql`\r\n  query HomepageQuery($locale: String!, $path: String!) {\r\n    datoCmsHomepage(locale: { eq: $locale }) {\r\n      locale\r\n      seo {\r\n        seoTitle: title\r\n        seoDescription: description\r\n        seoImage: image {\r\n          seoImageUrl: url\r\n        }\r\n      }\r\n      hero {\r\n        heroAlt\r\n        heroTitle\r\n        heroSubtitle\r\n      }\r\n      features {\r\n        id: originalId\r\n        title\r\n        description\r\n      }\r\n      featuredPostsTitle\r\n    }\r\n    datoCmsBlogRoot(locale: { eq: $locale }) {\r\n      locale\r\n      id: originalId\r\n    }\r\n    allBlogPosts: allDatoCmsBlogPost(\r\n      filter: {\r\n        locale: { eq: $locale }\r\n        featuredInHomepage: { eq: true }\r\n        noTranslate: { ne: true }\r\n        categoryLink: { noTranslate: { ne: true } }\r\n      }\r\n      sort: { order: ASC, fields: meta___updatedAt }\r\n      limit: 6\r\n    ) {\r\n      postNodes: nodes {\r\n        locale\r\n        id: originalId\r\n        meta {\r\n          updatedAt\r\n        }\r\n        categoryLink {\r\n          title\r\n        }\r\n        coverImage {\r\n          gatsbyImageData(\r\n            width: 300\r\n            height: 120\r\n            placeholder: NONE\r\n            forceBlurhash: false\r\n          )\r\n          squaredImage: gatsbyImageData(\r\n            width: 100\r\n            height: 100\r\n            imgixParams: { ar: \"1\", fit: \"crop\" }\r\n          )\r\n        }\r\n        author {\r\n          authorName: name\r\n          picture {\r\n            authorImageData: gatsbyImageData(\r\n              height: 30\r\n              width: 30\r\n              placeholder: NONE\r\n            )\r\n          }\r\n        }\r\n        subtitle\r\n        title\r\n      }\r\n    }\r\n    datoCmsMiscTextString(locale: { eq: $locale }) {\r\n      locale\r\n      seeAllPosts\r\n    }\r\n    allBuilderModels {\r\n      onePage(\r\n        target: { urlPath: $path }\r\n        options: { cachebust: true }\r\n      ) { content }\r\n    }\r\n  }\r\n`;"],"names":["ArticleCard","_ref","recordId","date","title","excerpt","authorImg","authorName","category","cardImg","cardImgMobile","altImg","images","artDirectedCardImgs","formattedDate","useFormattedDate","_jsx","children","_jsxs","CardLink","CardImgContainer","CardImg","objectFit","image","alt","ContentWrapper","CategoryBox","Date","PostTitle","Excerpt","AuthorCtaContainer","AuthorContainer","AuthorImg","as","RichTextStyles","styled","div","withConfig","displayName","componentId","uncontrolledHTMLStyles","isRtl","css","RichText","useTextDirection","timeOptions","hour","minute","dateOptions","year","month","day","formatDateTime","dateString","contextLocale","toLocaleString","Object","assign","formatDate","pageLocale","useContext","LocaleContext","builder","init","_seo$seoImage","_ref$data","data","_ref$data$datoCmsHome","datoCmsHomepage","seo","_ref$data$datoCmsHome3","hero","heroAlt","heroTitle","heroSubtitle","features","featuredPostsTitle","id","datoCmsBlogRoot","postNodes","allBlogPosts","seeAllPosts","datoCmsMiscTextString","pageContext","PageWrapper","pageData","seoTitle","seoDescription","seoImage","seoImageUrl","BuilderComponent","model","Hero","caption","subtitle","button","Navigator","className","sectionChildren","SectionGridThreeCols","noPaddings","map","_ref2","featureId","description","GridTextBox","small","HeadingSmallWithTip","length","style","paddingTop","SectionTitle","_ref3","updatedAt","meta","coverImage","_ref3$author","author","authorImageData","picture","categoryLink","gatsbyImageData","squaredImage","authorAltImg"],"sourceRoot":""}