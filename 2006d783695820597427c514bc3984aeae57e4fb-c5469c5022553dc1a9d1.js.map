{"version":3,"file":"2006d783695820597427c514bc3984aeae57e4fb-c5469c5022553dc1a9d1.js","mappings":"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","sources":["webpack://headless-gatsby-multilang/./node_modules/camelcase/index.js","webpack://headless-gatsby-multilang/../src/image-utils.ts","webpack://headless-gatsby-multilang/../src/components/hooks.ts","webpack://headless-gatsby-multilang/../src/components/picture.tsx","webpack://headless-gatsby-multilang/../src/components/layout-wrapper.tsx","webpack://headless-gatsby-multilang/../src/components/placeholder.tsx","webpack://headless-gatsby-multilang/../src/components/main-image.tsx","webpack://headless-gatsby-multilang/../src/components/gatsby-image.browser.tsx","webpack://headless-gatsby-multilang/../src/components/gatsby-image.server.tsx","webpack://headless-gatsby-multilang/../src/components/static-image.server.tsx","webpack://headless-gatsby-multilang/../src/components/static-image.tsx","webpack://headless-gatsby-multilang/./src/components/Layout/Blog/Cards/styles.js"],"sourcesContent":["'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n  return string;\n};\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n  if (input.length === 0) {\n    return '';\n  }\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n  var hasUpperCase = input !== input.toLowerCase();\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import styled from 'styled-components';\r\n\r\nimport { GatsbyImage, getImage, withArtDirection } from 'gatsby-plugin-image';\r\n\r\nimport { HeadingSmall } from '../../sharedStyles/headingStyles';\r\nimport { easeOutTiming } from '../../sharedStyles/animationStyles';\r\nimport { Navigator } from '../../../Navigator';\r\n\r\nconst CardLink = styled(Navigator)`\r\n  width: 100%;\r\n  row-gap: var(--gapSmall);\r\n  display: grid;\r\n  height: min-content;\r\n  justify-content: start;\r\n\r\n  @media (max-width: 950px) {\r\n    grid-template-columns: repeat(3, 1fr);\r\n    column-gap: var(--gapRegular);\r\n    align-items: initial;\r\n    min-height: 120px;\r\n  }\r\n\r\n  @media (hover: hover) {\r\n    &:hover {\r\n      & h1 {\r\n        color: var(--primaryColor);\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CardImgContainer = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst CardImg = styled(GatsbyImage)`\r\n  border-radius: var(--defaultRadius);\r\n  z-index: 2;\r\n\r\n  @media (max-width: 950px) {\r\n    --widthMobile: 50px;\r\n    min-width: var(--widthMobile);\r\n    min-height: var(--widthMobile);\r\n  }\r\n\r\n  & picture {\r\n    & img {\r\n      border-radius: var(--defaultRadius);\r\n      @media (max-width: 950px) {\r\n        height: unset !important;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CategoryBox = styled.span`\r\n  width: max-content;\r\n  white-space: nowrap;\r\n  line-height: 0.8;\r\n  position: relative;\r\n  padding: 0.3em 0.5em 0.4em 0.5em;\r\n  margin-bottom: -5px;\r\n  border: var(--borderSmall) solid var(--primaryColor);\r\n  color: var(--primaryColor);\r\n  border-radius: 5px;\r\n  font-size: var(--baseS);\r\n  font-weight: 600;\r\n\r\n  @media (max-width: 950px) {\r\n    margin-bottom: 0;\r\n  }\r\n`;\r\n\r\nconst artDirectedCardImgs = (cardImg, cardImgMobile) => {\r\n  const cardImgs = withArtDirection(getImage(cardImg), [\r\n    {\r\n      media: '(max-width: 950px)',\r\n      image: getImage(cardImgMobile),\r\n    },\r\n  ]);\r\n  return cardImgs;\r\n};\r\n\r\nconst ContentWrapper = styled.div`\r\n  row-gap: var(--gapSmall);\r\n  display: grid;\r\n  height: max-content;\r\n\r\n  @media (max-width: 950px) {\r\n    row-gap: calc(var(--gapSmall) / 1.5);\r\n    grid-column: 2 / span 2;\r\n  }\r\n`;\r\n\r\nconst PostTitle = styled(HeadingSmall)`\r\n  &&& {\r\n    margin-top: ${({ isCategoryTitle }) =>\r\n      isCategoryTitle ? '0.25em' : '-0.25em'};\r\n    line-height: 1.1;\r\n  }\r\n  transition: color ${easeOutTiming};\r\n  margin: calc(var(--gapSmall) - 0.66em) 0;\r\n\r\n  @media (max-width: 950px) {\r\n    margin: unset;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: var(--baseMMobile);\r\n  }\r\n`;\r\n\r\nconst Date = styled.time`\r\n  color: var(--baseTextColor);\r\n  font-size: var(--baseS);\r\n  text-transform: capitalize;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: var(--baseSMobile);\r\n  }\r\n`;\r\n\r\nconst Excerpt = styled.p`\r\n  color: var(--baseTextColor);\r\n  font-size: var(--baseM);\r\n  line-height: 1.3;\r\n`;\r\n\r\nconst AuthorCtaContainer = styled.footer`\r\n  display: flex;\r\n  grid-template-columns: auto auto;\r\n  column-gap: var(--gapRegular);\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst AuthorContainer = styled.div`\r\n  --imgWidthHeight: 25px;\r\n  display: grid;\r\n  grid-template-columns: var(--imgWidthHeight) auto;\r\n  column-gap: var(--gapSmall);\r\n  align-items: center;\r\n\r\n  @media (max-width: 950px) {\r\n    --imgWidthHeight: 20px;\r\n    column-gap: calc(var(--gapSmall) - 0.33em);\r\n    grid-template-columns: var(--imgWidthHeight) auto;\r\n  }\r\n`;\r\n\r\nconst AuthorImg = styled(GatsbyImage)`\r\n  width: var(--imgWidthHeight);\r\n  height: var(--imgWidthHeight);\r\n\r\n  & img {\r\n    border-radius: var(--imgWidthHeight);\r\n  }\r\n`;\r\n\r\nexport {\r\n  CardLink,\r\n  CardImgContainer,\r\n  CardImg,\r\n  CategoryBox,\r\n  ContentWrapper,\r\n  PostTitle,\r\n  Date,\r\n  Excerpt,\r\n  AuthorCtaContainer,\r\n  AuthorContainer,\r\n  AuthorImg,\r\n  artDirectedCardImgs,\r\n};\r\n"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","N","HTMLImageElement","prototype","W","e","t","a","Boolean","images","fallback","src","gatsbyImageData","gatsbyImage","childImageSharp","j","r","u","loading","shouldLoad","style","opacity","O","n","s","o","l","backgroundColor","width","height","position","top","left","bottom","right","objectFit","objectPosition","d","transition","C","_r$images$sources2","_n$sources","placeholder","c","sources","forEach","_ref4","_r$images$sources","media","image","layout","push","apply","_toConsumableArray","concat","srcSet","V","z","D","_ref5","paddingTop","maxWidth","display","alt","role","A","children","q","P","H","_t$alt","decoding","G","_t$sources","_t$shouldLoad","sizes","_ref6","type","key","propTypes","isRequired","displayName","B","F","Error","U","Q","ee","Y","_len","arguments","_key","h","X","J","Z","K","Set","te","_e$as","as","className","g","class","p","onStartLoad","onLoad","f","onError","w","y","b","v","E","M","k","S","$","I","JSON","stringify","then","_ref7","renderImageToString","swapPlaceholderImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","add","has","_ref8","innerHTML","isLoading","isLoaded","requestAnimationFrame","cancelAnimationFrame","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ae","ie","re","_len2","_key2","ne","se","oe","__imageData","__error","console","warn","CardLink","styled","Navigator","withConfig","componentId","CardImgContainer","div","CardImg","GatsbyImage","CategoryBox","span","artDirectedCardImgs","cardImg","cardImgMobile","withArtDirection","getImage","ContentWrapper","PostTitle","HeadingSmall","_ref","isCategoryTitle","easeOutTiming","Date","time","Excerpt","AuthorCtaContainer","footer","AuthorContainer","AuthorImg"],"sourceRoot":""}